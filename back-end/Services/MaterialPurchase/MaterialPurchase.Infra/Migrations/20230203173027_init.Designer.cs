// <auto-generated />
using System;
using MaterialPurchase.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaterialPurchase.Infra.Migrations
{
    [DbContext(typeof(MaterialPurchaseContext))]
    [Migration("20230203173027_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Commom.Domain.BaseEntities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "admin",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FunctionIdRole", b =>
                {
                    b.Property<Guid>("FunctionsIdsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("FunctionsIdsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("FunctionIdRole");

                    b.HasData(
                        new
                        {
                            FunctionsIdsId = new Guid("9caf5d43-bcb3-480a-855c-95cb334fb567"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("3dbed3d8-0ca8-44ed-b584-d6d7c5981f10"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("8b0dc6c4-f111-470c-a0e7-c86d24042d04"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("0e8cd6e5-4ad9-4fe8-b701-548dba923ba8"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("78d8138f-7611-48bd-8c19-4f7bde11d4cb"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("2f7c0727-f0ce-42ba-86f2-d2432ea23dad"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("9ed9f78a-edc4-44ab-9976-5b53be65273d"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("e425be12-6bbd-419f-8615-a9cefbd5091b"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("3c02e4ab-f25d-4fec-a8bc-75094e0f5008"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("3aa12411-9e7c-427f-828b-af39f98e7d61"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("1c55cb36-d9b6-430e-9c7f-9b1dd8f359cd"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("0f7ab23d-e040-4f78-a981-b68239bb67fe"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("79782c6e-49b9-4772-9555-135439779162"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("b2f9f1e8-20e1-444a-8094-64e169009166"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("a2d2546f-2382-4a71-a4fb-cad76f0515cc"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("e40c3197-9e5d-442a-8ce7-5f156324a35e"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("88b47f58-331f-465c-a99e-164339cac45d"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        },
                        new
                        {
                            FunctionsIdsId = new Guid("807c1a3b-48d3-4bdb-9b72-f7a3df841d40"),
                            RolesId = new Guid("2dcb40c6-6508-4d88-af05-bbdf96584609")
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d006cdeb-4120-4c48-a1d0-3a6504c0ccdf"),
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4941),
                            Description = "description",
                            Name = "TIGRE",
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4941)
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Construction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Constructions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cad4da64-e4ab-4b4a-8e83-63fc05fefa64"),
                            CorporateName = "Build LTDA",
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(5150),
                            NickName = "Build Ltda",
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(5151)
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ConstructionAuthUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConstructionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.ToTable("ConstructionAuthUserGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6389915-3947-46d1-a636-da6f9ad505aa"),
                            ConstructionId = new Guid("cad4da64-e4ab-4b4a-8e83-63fc05fefa64"),
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(5270),
                            Priority = 0,
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(5271)
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ConstructionUserAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthorizationStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("ConstructionUserAuthorizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("38db1f77-f9d2-414c-aeeb-35a57ac4cc2e"),
                            AuthorizationStatus = 0,
                            AuthorizationUserGroupId = new Guid("e6389915-3947-46d1-a636-da6f9ad505aa"),
                            Comment = "",
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(5292),
                            Permissions = 4,
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(5293),
                            UserId = new Guid("4922766e-d3ba-4d4c-99b0-093d5977d41f")
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.FunctionId", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FunctionsIds");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9caf5d43-bcb3-480a-855c-95cb334fb567"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1001",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3dbed3d8-0ca8-44ed-b584-d6d7c5981f10"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1002",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8b0dc6c4-f111-470c-a0e7-c86d24042d04"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1003",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0e8cd6e5-4ad9-4fe8-b701-548dba923ba8"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1004",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("78d8138f-7611-48bd-8c19-4f7bde11d4cb"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1005",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2f7c0727-f0ce-42ba-86f2-d2432ea23dad"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1006",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9ed9f78a-edc4-44ab-9976-5b53be65273d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1007",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e425be12-6bbd-419f-8615-a9cefbd5091b"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1008",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3c02e4ab-f25d-4fec-a8bc-75094e0f5008"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1009",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3aa12411-9e7c-427f-828b-af39f98e7d61"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1010",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1c55cb36-d9b6-430e-9c7f-9b1dd8f359cd"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1011",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0f7ab23d-e040-4f78-a981-b68239bb67fe"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1012",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("79782c6e-49b9-4772-9555-135439779162"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1013",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b2f9f1e8-20e1-444a-8094-64e169009166"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1014",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a2d2546f-2382-4a71-a4fb-cad76f0515cc"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1015",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e40c3197-9e5d-442a-8ce7-5f156324a35e"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1016",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("88b47f58-331f-465c-a99e-164339cac45d"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1017",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("807c1a3b-48d3-4bdb-9b72-f7a3df841d40"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1018",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ItemMaterialPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(13, 4)
                        .HasColumnType("numeric(13,4)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("ItemMaterialPurchases");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Unity")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b867637-aa7c-4878-9383-176a34ee3791"),
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4914),
                            Description = "description",
                            Name = "TUBO DE PVC",
                            Unity = "Metro",
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4916)
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Site")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8299c0dc-927d-45de-b2c8-71c38faf9384"),
                            Cnpj = "02.624.999/0001-23",
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4961),
                            Description = "description",
                            Email = "ponto@email.com",
                            Name = "PONTO DO ENCANADOR",
                            Phone = "Phone",
                            Site = "Site.com",
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4961)
                        });
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConstructionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Freight")
                        .HasPrecision(18, 6)
                        .HasColumnType("numeric(18,6)");

                    b.Property<DateTime?>("LimitDeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConstructionId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseAuthUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseAuthUserGroups");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseDeliveryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MaterialPurchaseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uuid");

                    b.Property<double>("Quantity")
                        .HasPrecision(13, 2)
                        .HasColumnType("double precision");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MaterialPurchaseId");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("PurchaseDeliveryItems");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseUserAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AuthorizationStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("AuthorizationUserGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationUserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseUserAuthorizations");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4922766e-d3ba-4d4c-99b0-093d5977d41f"),
                            CreatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4656),
                            Role = "admin",
                            UpdatedAt = new DateTime(2023, 2, 3, 14, 30, 27, 418, DateTimeKind.Local).AddTicks(4665),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("FunctionIdRole", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.FunctionId", null)
                        .WithMany()
                        .HasForeignKey("FunctionsIdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Commom.Domain.BaseEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Construction", b =>
                {
                    b.OwnsOne("MaterialPurchase.Domain.BaseEntities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ConstructionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)");

                            b1.HasKey("ConstructionId");

                            b1.ToTable("Constructions");

                            b1.WithOwner()
                                .HasForeignKey("ConstructionId");

                            b1.HasData(
                                new
                                {
                                    ConstructionId = new Guid("cad4da64-e4ab-4b4a-8e83-63fc05fefa64"),
                                    City = "Piracicaba",
                                    Country = "Brasil",
                                    State = "Sao Paulo",
                                    Street = "Dom Pedro",
                                    ZipCode = "99999-000"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ConstructionAuthUserGroup", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Construction", "Construction")
                        .WithMany("PurchasingAuthorizationUserGroups")
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Construction");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ConstructionUserAuthorization", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.ConstructionAuthUserGroup", "AuthorizationUserGroup")
                        .WithMany("UserAuthorizations")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ItemMaterialPurchase", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Purchase", "Purchase")
                        .WithMany("Materials")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Material");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Provider", b =>
                {
                    b.OwnsOne("MaterialPurchase.Domain.BaseEntities.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ProviderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");

                            b1.HasData(
                                new
                                {
                                    ProviderId = new Guid("8299c0dc-927d-45de-b2c8-71c38faf9384"),
                                    City = "Piracicaba",
                                    Country = "Brasil",
                                    State = "Sao Paulo",
                                    Street = "Dom Pedro",
                                    ZipCode = "99999-000"
                                });
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Purchase", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Construction", "Construction")
                        .WithMany()
                        .HasForeignKey("ConstructionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Construction");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseAuthUserGroup", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Purchase", "Purchase")
                        .WithMany("AuthorizationUserGroups")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseDeliveryItem", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.ItemMaterialPurchase", "MaterialPurchase")
                        .WithMany()
                        .HasForeignKey("MaterialPurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.Purchase", "Purchase")
                        .WithMany("PurchaseDeliveries")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MaterialPurchase");

                    b.Navigation("Purchase");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseUserAuthorization", b =>
                {
                    b.HasOne("MaterialPurchase.Domain.BaseEntities.PurchaseAuthUserGroup", "AuthorizationUserGroup")
                        .WithMany("UserAuthorizations")
                        .HasForeignKey("AuthorizationUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaterialPurchase.Domain.BaseEntities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AuthorizationUserGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Construction", b =>
                {
                    b.Navigation("PurchasingAuthorizationUserGroups");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.ConstructionAuthUserGroup", b =>
                {
                    b.Navigation("UserAuthorizations");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.Purchase", b =>
                {
                    b.Navigation("AuthorizationUserGroups");

                    b.Navigation("Materials");

                    b.Navigation("PurchaseDeliveries");
                });

            modelBuilder.Entity("MaterialPurchase.Domain.BaseEntities.PurchaseAuthUserGroup", b =>
                {
                    b.Navigation("UserAuthorizations");
                });
#pragma warning restore 612, 618
        }
    }
}
