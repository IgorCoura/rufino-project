# apiVersion: v1
# kind: Service
# metadata:
#   name: keycloak-external       # Nome do Service que expõe o Keycloak externamente
#   labels:
#     app: keycloak               # Label usada para selecionar os Pods correspondentes
# spec:
#   ports:
#     - protocol: TCP
#       port: 8080                # Porta externa exposta pelo Service
#       targetPort: http          # Porta do contêiner apontada (keycloak:8080)
#       name: http                # Nome da porta (útil para referência)
#   selector:
#     app: keycloak               # Seleciona Pods com a label app=keycloak
#   type: LoadBalancer            # Service com IP externo para acesso fora do cluster

---
apiVersion: v1
kind: Service
metadata:
  name: keycloak                # Nome do Service que expõe o Keycloak
  labels:
    app: keycloak              # Label usada para selecionar os Pods correspondentes
spec:
  ports:
    - protocol: TCP
      port: 8080               # Porta exposta pelo Service dentro do cluster
      targetPort: http         # Porta do contêiner apontada (keycloak:8080)
      name: http               # Nome da porta (útil para referência)
  selector:
    app: keycloak              # Seleciona Pods com a label app=keycloak
  type: ClusterIP             # Service interno do cluster, sem IP externo

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: keycloak              # Label igual ao primeiro Service
  name: keycloak-discovery     # Headless Service para discovery entre pods
spec:
  selector:
    app: keycloak              # Usa os mesmos Pods do Keycloak
  publishNotReadyAddresses: true  # Inclui Pods ainda não prontos no DNS
  clusterIP: None                 # Sem IP virtual — libera DNS por Pod
  type: ClusterIP

---

apiVersion: apps/v1
# Use a stateful setup to ensure that for a rolling update Pods are restarted with a rolling strategy one-by-one.
# This prevents losing in-memory information stored redundantly in two Pods.
kind: StatefulSet              # Gerencia Pods com identidade e ordem
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  serviceName: keycloak-discovery  # Headless Service usado para DNS dos Pods
  # Run with one replica to save resources, or with two replicas to allow for rolling updates for configuration changes
  replicas: 2                      # Dois Pods, suportando rolling updates :contentReference[oaicite:1]{index=1}
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
      - name: keycloak
        image: quay.io/keycloak/keycloak:26.3.1  # Imagem Keycloak
        args: ["start"]                           # Inicia o servidor Keycloak
        env:
          - name: KC_BOOTSTRAP_ADMIN_USERNAME       # Usuário admin inicial
            value: "admin"
          - name: KC_BOOTSTRAP_ADMIN_PASSWORD       # Senha admin inicial
            value: "admin"
            # In a production environment, add a TLS certificate to Keycloak to either end-to-end encrypt the traffic between
            # the client or Keycloak, or to encrypt the traffic between your proxy and Keycloak.
            # Respect the proxy headers forwarded by the reverse proxy
            # In a production environment, verify which proxy type you are using, and restrict access to Keycloak
            # from other sources than your proxy if you continue to use proxy headers.
          - name: KC_PROXY_HEADERS                  # Header do proxy: xforwarded
            value: "xforwarded"
          - name: KC_HTTP_ENABLED                   # Habilita HTTP
            value: "true"
            # In this explorative setup, no strict hostname is set.
              # For production environments, set a hostname for a secure setup.
          - name: KC_HOSTNAME_STRICT
            value: "false"
          - name: KC_HEALTH_ENABLED
            value: "true"
          - name: 'KC_CACHE'
            value: 'ispn'
          # Use the Kubernetes configuration for distributed caches which is based on DNS
          - name: 'KC_CACHE_STACK'
            value: 'kubernetes'
          # Passing the Pod's IP primary address to the JGroups clustering as this is required in IPv6 only setups
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          # Instruct JGroups which DNS hostname to use to discover other Keycloak nodes
          # Needs to be unique for each Keycloak cluster
          - name: JAVA_OPTS_APPEND
            value: '-Djgroups.dns.query="keycloak-discovery" -Djgroups.bind.address=$(POD_IP)'
          - name: 'KC_DB_URL_DATABASE'
            value: 'keycloak'
          - name: 'KC_DB_URL_HOST'
            value: 'postgres'
          - name: 'KC_DB'
            value: 'postgres'
          # In a production environment, use a secret to store username and password to the database
          - name: 'KC_DB_PASSWORD'
            value: 'keycloak'
          - name: 'KC_DB_USERNAME'
            value: 'keycloak'
        ports:
          - name: http
            containerPort: 8080
        startupProbe:
            httpGet:
              path: /health/started
              port: 9000
            periodSeconds: 1
            failureThreshold: 600  
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 9000
          periodSeconds: 10
          failureThreshold: 3              
        livenessProbe:
          httpGet:
            path: /health/live
            port: 9000
          periodSeconds: 10
          failureThreshold: 3              
        resources:
          limits:
            cpu: 2000m
            memory: 2000Mi
          requests:
            cpu: 500m
            memory: 1700Mi

---
# This is deployment of PostgreSQL with an ephemeral storage for testing: Once the Pod stops, the data is lost.
# For a production setup, replace it with a database setup that persists your data.
apiVersion: apps/v1
kind: Deployment               # Deployment para o banco PostgreSQL
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1                   # Um único Pod (teste sem persistência)
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: mirror.gcr.io/postgres:17
        env:                               # Configurações do DB
        - name: POSTGRES_USER              # Nome do usuário
          value: "keycloak"
        - name: POSTGRES_PASSWORD          # Senha do DB
          value: "keycloak"
        volumeMounts:
        - mountPath: /var/lib/postgresql  # Monta /var/lib/postgresql no Pod
          name: postgres-data
      volumes:
        - name: postgres-data
          emptyDir: {}                      # Volume efêmero apagado quando o Pod para

---
apiVersion: v1
kind: Service                   # Service para PostgreSQL acessar pelo cluster
metadata:
  labels:
    app: postgres
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432                 # Porta exposta pelo Service
      targetPort: 5432           # Porta do container PostgreSQL
  type: ClusterIP               # Service interno do cluster
